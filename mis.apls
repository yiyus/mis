#!/usr/local/bin/dyalogscript MAXWS=32G

⍝ calculate misorientations distribution jesus.galanlopez@ugent.be 2024

⍝ Configuration
degrees←0                      ⍝ rad or deg in input files
angle_resolution←15            ⍝ in input files (degrees)
disorientation_resolution←2.5  ⍝ in output files (degrees)
number_of_orientations←5e3     ⍝ for random texture
output_file_0←'mis0.txt'       ⍝ output file when no ang file is found
output_file_1←'mis1.txt'       ⍝ output file when 1 ang file is found
output_file_2←'mis2.txt'       ⍝ output file when 2 ang files are found

⎕IO←0

:Namespace Euler                                                 ⍝ Orientations and misorientations
    c←↑(0 1 2 3)(1 0 3 2)(2 3 0 1)(3 2 1 0)                      ⍝ product components ⎕IO=0
    u←↑(1 ¯1 ¯1 ¯1)(1 1 1 ¯1)(1 ¯1 1 1)(1 1 ¯1 1)                ⍝ product unit factors
    QP←+/u×⊣(×⍤1)(⊂c)⌷⊢ ⋄ QC←×∘(1,-3⍴1) ⋄ QD←+.×                 ⍝ product, conjugate and dot product
    RD←180÷⍨○ ⋄ UV←×∘(÷(÷2)*⍨+.×⍨)⍨ ⋄ (x y z)←=∘⊂⍨⍳3             ⍝ degrees, unitary vector and unit vectors
    QA←((⊂2○⊢),(⊂1○⊢)∘.×∘UV{⍺←z ⋄ ⍺})∘(÷∘2) ⋄ QAD←QA∘RD          ⍝ quaternion from axis-angle
    QE←⊃{⍺←z x z ⋄ ⍺}QP.QA⊢ ⋄ QED←QE∘RD                          ⍝ quaternion from Euler angles (zxz)
    cs ← ⊂1 0 0 0                                                ⍝ cubic symmetry: identity
    cs,←,(1 0 0)(0 1 0)(0 0 1)∘.QAD 90 180 270                   ⍝                 4-fold around <001>
    cs,←,(1 1 1)(¯1 1 1)(1 ¯1 1)(1 1 ¯1)∘.QAD 120 240            ⍝                 3-fold around <111>
    cs,←,(1 1 0)(1 0 1)(0 1 1)(1 ¯1 0)(¯1 0 1)(0 1 ¯1)∘.QAD 180  ⍝                 2-fold around <110>
    MC←⊃2×¯2○1⌊cs⌈.(|QD)∘⊂QC⍤QP∘QC ⋄ ML←⌊○⍤⊣÷⍨180×⊢              ⍝ misorientation (cubic symmetry) and level
    RND←{F←{(1 2○⊂2×○?⍺⍴0)×⊂⍵*÷2} ⋄ UV⍵(F∘(1∘-),F)?⍵⍴0}          ⍝ generate ⍵ random orientations
:EndNamespace

ANG←{
    ⍺←0 ⋄ l←(('#'≠⊃¨)⊢⍤/⊢)⊃⎕NGET(⍞←⍵)1                           ⍝ get lines
    c←⎕CSV⍠2⊢('(^\s+)|(\s+$)' '\s+'⎕R'' ','⊢l)'N'2 0             ⍝ get columns
    (ea t)←↓⍉{⍺,≢⍵}⌸↓⍉↑(a←○⍺÷180)(⌊0.5+÷⍨)⍣(⍺>0)⊢(○2)|3↑c        ⍝ euler angles and frequencies
    ⍞←' ',≢ea ⋄ (Euler.QE∘(Euler.RD⍣degrees)a×⍣(⍺>0)↓⍉↑ea)t      ⍝ return quaternions and frequencies
}

M←{
    D←{(+/⍺⍺)÷⍨(i,⍵)(+/⍤⊢)⌸⍺⍺,⍨0×i←⍳1+disorientation_resolution Euler.ML(○÷180)×63.8}
    M0←{(number_of_orientations⍴1)M1 Euler.RND⍞←number_of_orientations}
    M1←{ia←/⍨i←1+⍳1-⍨≢w←↓⍉↑⍵ ⋄ iw←⊃,/⍳¨i ⋄ (w[ia])((⍺⍺[ia])M2(⍺⍺[iw]))⍥{↓⍉↑⍵}w[iw]}
    M2←{⍞←' ',(≢⍵⍵),' ' ⋄ (⍺⍺×⍵⍵)D⊃disorientation_resolution Euler.ML⍺Euler.MC⍵}
    W←{(⊂5⍕¨⍵)⎕NPUT(⍞←⍺)1}
    a←⊃⎕NINFO⍠1⊢'*.ang' ⋄ 2<≢a:'' ⋄ 0=≢a:output_file_0 W M0⍬
    (qa ta)←angle_resolution ANG 0⊃a ⋄ 1=≢a:output_file_1 W(ta M1)qa ⋄ ⍞←' '
    (qw tw)←angle_resolution ANG 1⊃a ⋄ output_file_2 W qa(ta M2 tw)qw
}

M⍬
